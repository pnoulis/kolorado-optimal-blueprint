#!/bin/bash

usage() {
    cat<<EOF
NAME
    ${0} - build the website of the kolorado-optimal-blueprint project

SYNOPSIS
    ${0} [...OPTIONS]

EOF
}

# IFS needs to be set, to space, tab, and newline, in precisely that order.
# (If _AS_PATH_WALK were called with IFS unset, it would have the
# side effect of setting IFS to empty, thus disabling word splitting.)
# Quoting is to prevent editors from complaining about space-tab.
as_nl='
'
export as_nl
IFS=" ""	$as_nl"

PS1='$ '
PS2='> '
PS4='+ '

# Ensure predictable behavior from utilities with locale-dependent output.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# Log configure output
rm -f config.log
exec > >(tee config.log)
pre_config_env=$(mktemp)
printenv > $pre_config_env
post_config_env=$(mktemp)

# Author
export PKG_AUTHOR_NAME="pavlos noulis"
export PKG_AUTHOR_ID="pnoulis"
export PKG_AUTHOR_EMAIL="pavlos.noulis@gmail.com"
export PKG_AUTHOR_HOME_URL="https://github.com/pnoulis"
# Package
export PKG_NAME="kolorado-optimal-blueprint-website"
export PKG_ID="boptimus-website"
export PKG_PRETTY_NAME="kolorado optimal blueprint website"
export PKG_VERSION="0.0.1"
export PKG_VERSION_ID="0.0.1"
export PKG_VERSION_CODENAME=""
export PKG_TARNAME="boptimus-website-v0.0.1"
export PKG_REPOSITORY_TYPE="git"
export PKG_REPOSITORY_DOMAIN="github.com"
export PKG_REPONAME="kolorado-optimal-blueprint"
export PKG_REPOSITORY_PATH="pnoulis/kolorado-optimal-blueprint"
export PKG_REPOSITORY_URL="https://github.com/pnoulis/kolorado-optimal-blueprint"
export PKG_HOME_URL="https://github.com/pnoulis/kolorado-optimal-blueprint"
export PKG_DOCUMENTATION_URL="https://github.com/pnoulis/kolorado-optimal-blueprint#readme"
export PKG_BUG_REPORT_URL="https://github.com/pnoulis/kolorado-optimal-blueprint/issues"
export PKG_SUPPORT_URL="https://github.com/pnoulis/kolorado-optimal-blueprint"

# Options
export MODE=production
export NODE_ENV=$MODE
export URL=http://localhost
export PORT=3000
export SERVER_URL=
export BUILDIR_BASENAME=build
export DISTDIR_BASENAME=dist

main() {
    parse_args "$@"
    set -- "${POSARGS[@]}"

    resolve_buildir
    resolve_system
    resolve_dependencies
    resolve_options
    define_program_name
    define_installdirs
    define_derived_installdirs
    create_envfile
    create_macrosfile
    create_makefile
    cleanup
}

resolve_options() {
    print_chapter "Resolving options..."
    echo "mode...|$MODE"

    echo "url...|$URL"
    parse_url "$URL" "URL" "$PORT"
    echo "url_scheme...|$URL_SCHEME"
    echo "url_user...|$URL_USER"
    echo "url_pass...|$URL_PASS"
    echo "url_hostname...|$URL_HOSTNAME"
    echo "url_port...|$URL_PORT"
    echo "url_path...|$URL_PATH"
    echo "url_origin...|$URL_ORIGIN"

    echo "server url...|$SERVER_URL"
    parse_url "$URL" "SERVER" "$PORT"
    echo "server_url_scheme...|$SERVER_URL_SCHEME"
    echo "server_url_user...|$SERVER_URL_USER"
    echo "server_url_pass...|$SERVER_URL_PASS"
    echo "server_url_hostname...|$SERVER_URL_HOSTNAME"
    echo "server_url_port...|$URL_PORT"
    echo "server_url_path...|$URL_PATH"
    echo "server_url_origin...|$URL_ORIGIN"
}
resolve_buildir() {
    print_chapter "Resolving buildir..."

    declare -gx BUILDIR=.
    declare -gx BUILDIR_ABS="$(pwd)"
    declare -gx SRCDIR_ABS="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" 2>/dev/null && pwd)"
    declare -gx SRCDIR="$(realpath -e --relative-to="$BUILDIR_ABS" "$SRCDIR_ABS")"

    echo "BUILDIR_ABS...|$BUILDIR_ABS"
    echo "BUILDIR...|$BUILDIR"
    echo "SRCDIR_ABS...|$SRCDIR_ABS"
    echo "SRCDIR...|$SRCDIR"
}

resolve_system() {
    print_chapter "Resolving system..."
    case "$(uname -s)" in
        Linux*)
            BUILD_KERNEL=linux
            ;;
        Darwin*)
            BUILD_KERNEL=mac
            ;;
        *)
            fatal "Could not resolve system: '$(uname -s)'"
            ;;
    esac
    echo "BUILD_KERNEL...|$BUILD_KERNEL"
}

resolve_dependencies() {
  print_chapter "Resolving dependencies..."

  is_command_installed bash 5.1.16 ">="
  declare -gx BASH=$command_path

  is_command_installed make 4.3 ">="
  declare -gx MAKE=$command_path

  is_command_installed m4 1.4.19 ">="
  declare -gx M4=$command_path

  is_command_installed rm
  declare -gx RM=$command_path

  is_command_installed cp
  declare -gx CP=$command_path

  is_command_installed cat
  declare -gx CAT=$command_path

  is_command_installed chmod
  declare -gx CHMOD=$command_path

  is_command_installed chown
  declare -gx CHOWN=$command_path

  is_command_installed jq
  declare -gx JQ=$command_path
}

define_installdirs() {
    print_chapter "Defining installation directory variables..."

    ## GNU standard installation directory variables
    ## https://www.gnu.org/prep/standards/html_node/Directory-Variables.html
    false PREFIX && declare -gx PREFIX='${prefix:-/usr/local}'
    false EXEC_PREFIX && declare -gx EXEC_PREFIX='${prefix}'
    false BINDIR && declare -gx BINDIR='${exec_prefix}/bin'
    false SBINDIR && declare -gx SBINDIR='${exec_prefix}/sbin'
    false LIBEXECDIR && declare -gx LIBEXECDIR='${exec_prefix}/libexec'
    false DATAROOTDIR && declare -gx DATAROOTDIR='${prefix}/share'
    false DATADIR && declare -gx DATADIR='${datarootdir}'
    false SYSCONFDIR && declare -gx SYSCONFDIR='${prefix}/etc'
    false SHAREDSTATEDIR && declare -gx SHAREDSTATEDIR='${prefix}/com'
    false LOCALSTATEDIR && declare -gx LOCALSTATEDIR='${prefix}/var'
    false RUNSTATEDIR && declare -gx RUNSTATEDIR='${localstatedir}/run'
    false INCLUDEDIR && declare -gx INCLUDEDIR='${prefix}/include'
    false OLDINCLUDEDIR && declare -gx OLDINCLUDEDIR='/usr/include'
    false DOCDIR && declare -gx DOCDIR='${datarootdir}/doc/${program_name}'
    false INFODIR && declare -gx INFODIR='${datarootdir}/info'
    false HTMLDIR && declare -gx HTMLDIR='${docdir}'
    false DVIDIR && declare -gx DVIDIR='${docdir}'
    false PDFDIR && declare -gx PDFDIR='${docdir}'
    false PSDIR && declare -gx PSDIR='${docdir}'
    false LIBDIR && declare -gx LIBDIR='${exec_prefix}/lib'
    false LOCALEDIR && declare -gx LOCALEDIR='${datarootdir}/locale'
    false MANDIR && declare -gx MANDIR='${datarootdir}/man'

    echo "PREFIX...|$PREFIX"
    echo "EXEC_PREFIX...|$EXEC_PREFIX"
    echo "BINDIR...|$BINDIR"
    echo "SBINDIR...|$SBINDIR"
    echo "LIBEXECDIR...|$LIBEXECDIR"
    echo "DATAROOTDIR...|$DATAROOTDIR"
    echo "DATADIR...|$DATADIR"
    echo "SYSCONFDIR...|$SYSCONFDIR"
    echo "SHAREDSTATEDIR...|$SHAREDSTATEDIR"
    echo "LOCALSTATEDIR...|$LOCALSTATEDIR"
    echo "RUNSTATEDIR...|$RUNSTATEDIR"
    echo "INCLUDEDIR...|$INCLUDEDIR"
    echo "OLDINCLUDEDIR...|$OLDINCLUDEDIR"
    echo "DOCDIR...|$DOCDIR"
    echo "INFODIR...|$INFODIR"
    echo "HTMLDIR...|$HTMLDIR"
    echo "DVIDIR...|$DVIDIR"
    echo "PDFDIR...|$PDFDIR"
    echo "PSDIR...|$PSDIR"
    echo "LIBDIR...|$LIBDIR"
    echo "LOCALEDIR...|$LOCALEDIR"
    echo "MANDIR...|$MANDIR"
}

define_derived_installdirs() {
    print_chapter "Defining derived installation directory variables..."

    false TMPDIR && declare -gx TMPDIR="${TMPDIR:-/tmp}"
    false TMPDIR_PERSISTENT && declare -gx TMPDIR_PERSISTENT='/var/tmp'
    false STATEDIR && declare -gx STATEDIR='${localstatedir}/lib/${program_name}'
    false CACHEDIR && declare -gx CACHEDIR='${localstatedir}/cache/${program_name}'
    false LOGDIR && declare -gx LOGDIR='${localstatedir}/log/${program_name}'
    false SPOOLDIR && declare -gx SPOOLDIR='${localstatedir}/spool/${program_name}'
    false LOCKDIR && declare -gx LOCKDIR='${runstatedir}'
    false DESKTOPDIR && declare -gx DESKTOPDIR='${datarootdir}/applications'
    false ICONDIR && declare -gx ICONDIR='${datarootdir}/icons'
    false METAINFODIR && declare -gx METAINFODIR='${datarootdir}/metainfo'

    echo "TMPDIR...|$TMPDIR"
    echo "TMPDIR_PERSISTENT...|$TMPDIR_PERSISTENT"
    echo "STATEDIR...|$STATEDIR"
    echo "CACHEDIR...|$CACHEDIR"
    echo "LOGDIR...|$LOGDIR"
    echo "SPOOLDIR...|$SPOOLDIR"
    echo "LOCKDIR...|$LOCKDIR"
    echo "DESKTOPDIR...|$DESKTOPDIR"
    echo "ICONDIR...|$ICONDIR"
    echo "METAINFODIR...|$METAINFODIR"
}

define_program_name() {
    print_chapter "Definining program name..."

    PROGRAM_TRANSFORM_NAME='s,x,x,'
    if true PROGRAM_PREFIX; then
        PROGRAM_TRANSFORM_NAME="s&^&$PROGRAM_PREFIX&;$PROGRAM_TRANSFORM_NAME"
    fi
    if true PROGRAM_SUFFIX; then
        PROGRAM_TRANSFORM_NAME="s&\$&$PROGRAM_SUFFIX&;$PROGRAM_TRANSFORM_NAME"
    fi

    declare -gx PROGRAM_NAME="$(echo "$PKG_ID" | sed "$PROGRAM_TRANSFORM_NAME")"
    declare -gx PROGRAM_VNAME="${PROGRAM_NAME}-${PKG_VERSION}"

    echo "PROGRAM_NAME...|$PROGRAM_NAME"
    echo "PROGRAM_VNAME...|$PROGRAM_VNAME"
}

create_envfile() {
    print_chapter "Creating envfile..."
    declare -gx OUT_CONFIG_ENVFILE=${BUILDIR}/config.env
    OUT_CONFIG_ENVFILE_abs=${BUILDIR_ABS}/config.env
    rm -f $OUT_CONFIG_ENVFILE

    printenv > $post_config_env
    rm -f $OUT_CONFIG_ENVFILE
    local unquoted_envars=$(TMPDIR= mktemp)
    diff --normal $pre_config_env $post_config_env | grep '^>' | cut -c3- | sort > $unquoted_envars
    while IFS='=' read -r k v; do
        # Quote values
        if [[ "$v" =~ \' ]]; then
            printf "%s=\"%s\"\n" "$k" "$v" >> $OUT_CONFIG_ENVFILE
        else
            printf "%s='%s'\n" "$k" "$v" >> $OUT_CONFIG_ENVFILE
        fi
    done < $unquoted_envars

    rm -f $unquoted_envars
    echo "OUT_CONFIG_ENVFILE...|$OUT_CONFIG_ENVFILE"
    echo "OUT_CONFIG_ENVFILE_ABS...|$OUT_CONFIG_ENVFILE_abs"
}

create_macrosfile() {
  print_chapter "Creating macrosfile..."
  declare -gx OUT_CONFIG_MACROSFILE=${BUILDIR}/config.macros.m4
  OUT_CONFIG_MACROSFILE_abs=${BUILDIR_ABS}/config.macros.m4
  rm -f $OUT_CONFIG_MACROSFILE

  local unquoted_envars=$(TMPDIR= mktemp)
  diff --normal $pre_config_env $post_config_env | grep '^>' | cut -c3- | sort > $unquoted_envars
  rm -f $OUT_CONFIG_MACROSFILE
  echo "changequote([[[, ]]])dnl" > $OUT_CONFIG_MACROSFILE
  while IFS='=' read -r key value; do
    cat <<EOF >> $OUT_CONFIG_MACROSFILE
define([[[IN_$key]]], [[[$value]]])dnl
EOF
  done < $unquoted_envars

  rm -f $unquoted_envars
  echo "OUT_CONFIG_MACROSFILE...|$OUT_CONFIG_MACROSFILE"
  echo "OUT_CONFIG_MACROSFILE_ABS...|$OUT_CONFIG_MACROSFILE_abs"
}

create_makefile() {
    print_chapter "Creating makefile..."
    declare -gx OUT_CONFIG_MAKEFILE=${BUILDIR}/Makefile
    OUT_CONFIG_MAKEFILE_abs=${BUILDIR_ABS}/Makefile
    in_makefile=${SRCDIR_ABS}/Makefile.in
    rm -f $OUT_CONFIG_MAKEFILE

    m4 -DIN_CONFIG_MAKEFILE=$OUT_CONFIG_MAKEFILE \
       -DIN_CONFIG_ENVFILE=$OUT_CONFIG_ENVFILE \
       -DIN_CONFIG_MACROSFILE=$OUT_CONFIG_MACROSFILE \
       -DIN_SHEBANG='#!' \
       $OUT_CONFIG_MACROSFILE $in_makefile > $OUT_CONFIG_MAKEFILE

    echo "OUT_CONFIG_MAKEFILE...|$OUT_CONFIG_MAKEFILE"
    echo "OUT_CONFIG_MAKEFILE_abs...|$OUT_CONFIG_MAKEFILE_abs"
}

cleanup() {
    rm -f $pre_config_env
    rm -f $post_config_env
}

parse_args() {
    declare -ga POSARGS=()
    _param=
    while (($# > 0)); do
        case "${1:-}" in
            --mode | --mode=*)
                parse_param "$@" || shift $?
                MODE="$_param"
                ;;
            --url | --url=*)
                parse_param "$@" || shift $?
                URL="$_param"
                ;;
            --port | --port=*)
                parse_param "$@" || shift $?
                PORT="$_param"
                ;;
            --server-url | --server-url=*)
                parse_param "$@" || shift $?
                SERVER_URL="$_param"
                ;;
            --buildir | --buildir=*)
                parse_param "$@" || shift $?
                BUILDIR_BASENAME="$_param"
                ;;
            --distdir | --distdir=*)
                parse_param "$@" || shift $?
                DISTDIR_BASENAME="$_param"
                ;;
            -h | --help)
                usage
                exit 0
                ;;
            -[a-zA-Z][a-zA-Z]*)
                local i="${1:-}"
                shift
                local rest="$@"
                set --
                for i in $(echo "$i" | grep -o '[a-zA-Z]'); do
                    set -- "$@" "-$i"
                done
                set -- $@ $rest
                continue
                ;;
            --)
                shift
                POSARGS+=("$@")
                ;;
            -[a-zA-Z]* | --[a-zA-Z]*)
                fatal "Unrecognized argument ${1:-}"
                ;;
            *)
                POSARGS+=("${1:-}")
                ;;
        esac
        shift
    done
}

parse_param() {
    _param=
    local param arg
    local -i toshift=0

    if (($# == 0)); then
        return $toshift
    elif [[ "$1" =~ .*=.* ]]; then
        param="${1%%=*}"
        arg="${1#*=}"
    elif [[ "${2-}" =~ ^[^-].+ ]]; then
        param="$1"
        arg="$2"
        ((toshift++))
    fi


    if [[ -z "${arg-}" && ! "${OPTIONAL-}" ]]; then
        fatal "${param:-$1} requires an argument"
    fi

    _param="${arg:-}"
    return $toshift
}

parse_url() {
    # Shamelessly copied over from: https://gist.github.com/joshisa/297b0bc1ec0dcdda0d1625029711fa24
    # With some own additions
    url="$1"
    prefix="$2"
    _port="$3"

    protocol=$(echo "$1" | grep "://" | sed -e's,^\(.*://\).*,\1,g')
    # Remove the protocol
    url_no_protocol=$(echo "${1/$protocol/}")
    # Use tr: Make the protocol lower-case for easy string compare
    protocol=$(echo "$protocol" | tr '[:upper:]' '[:lower:]')

    # Extract the user and password (if any)
    # cut 1: Remove the path part to prevent @ in the querystring from breaking the next cut
    # rev: Reverse string so cut -f1 takes the (reversed) rightmost field, and -f2- is what we want
    # cut 2: Remove the host:port
    # rev: Undo the first rev above
    userpass=$(echo "$url_no_protocol" | grep "@" | cut -d"/" -f1 | rev | cut -d"@" -f2- | rev)
    pass=$(echo "$userpass" | grep ":" | cut -d":" -f2)
    if [ -n "$pass" ]; then
        user=$(echo "$userpass" | grep ":" | cut -d":" -f1)
    else
        user="$userpass"
    fi

    # Extract the host
    hostport=$(echo "${url_no_protocol/$userpass@/}" | cut -d"/" -f1)
    host=$(echo "$hostport" | cut -d":" -f1)
    port=$(echo "$hostport" | grep ":" | cut -d":" -f2)
    port=${port:-$_port}
    path=$(echo "$url_no_protocol" | grep "/" | cut -d"/" -f2-)

    # origin
    origin="$protocol"
    [[ "$user" != "" ]] && origin="${origin}${user}"
    [[ "$pass" != "" ]] && origin="${origin}:${pass}"
    [[ "$userpass" != "" ]] && oriign="${origin}@"
    origin="${origin}${host}:${port}"

    declare -gx ${prefix}_SCHEME="${protocol:-http}"
    declare -gx ${prefix}_USER="$user"
    declare -gx ${prefix}_PASS="$pass"
    declare -gx ${prefix}_HOSTNAME="$host"
    declare -gx ${prefix}_PORT="${port:-$PORT}"
    declare -gx ${prefix}_PATH="${path:-/}"
    declare -gx ${prefix}_ORIGIN="${origin}"
}

true() {
    if [[ "${!1}" == true ]] || [[ "${!1}" != false && "${!1}" != '' ]]; then
        return 0
    else
        return 1
    fi
}

false() {
    if [[ "${!1}" == false || "${!1}" == "" ]]; then
        return 0
    else
        return 1
    fi
}

print() {
    echo -e "${0}: $@"
}

debugv() {
    echo $1:"${!1}"
}

fatal() {
    print "$@"
    exit 1
}

print_chapter() {
    echo ""
    echo "##################################################"
    echo "$@"
    echo "##################################################"
}

strip_quotes() {
    echo "${1//\"/}"
}

# Ensure command is available and within version range
#
# declares the global variables:
# - command
# - version_required
# - command_path
# - version_installed
# - version_in_range
#
# @param {string} command
# @param {string} version template string
# @returns {number} 0 = true, 1 = false
is_command_installed() {
    command="$1"
    version_required="$2"
    local logical_operator="${3:-==}"
    command_path=
    version_installed=
    version_in_range=

    echo "Checking if" "$command" "is installed..."
    if ! command_path="$(get_command_path "$command")"; then
        echo "Missing command -> '$command'"
        return 1
    else
        echo "$command" "command path ->" "$command_path"
    fi

    if ! version_installed="$(get_version "$command")"; then
        echo "Failed to get version -> '$command'"
        return 1
    else
        echo "$command" "installed version ->" "$version_installed"
    fi

    if ! compare_versions "$version_installed" "$logical_operator" "$version_required"; then
        echo "$command" "matches version -> false"
        version_in_range=false
        return 1
    else
        echo "$command" "matches version -> true"
        version_in_range=true
    fi
}


# Resolve command's path
#
# @param {string} command
# @returns {string|exit code} path
get_command_path() {
    local command="$1"
    local path=
    path="$(which "$command" 2>/dev/null)" || return 1
    echo "$path"
}

# Find installed programs version
#
# @param {string} program
# @returns {string|exit code} version
get_version() {
    local program=$1
    local version=
    version="$($program --version | head -n 1 | grep -Eo '[0-9]+\.[0-9]+\.([0-9]+)?')" || return 1
    echo "$version"
}

# Compare two versions
#
# @param {string} semantic version - major.minor.patch
# @param {string} version template string
# @returns {number} 0 = true, 1 = false
#
# Where the version template string
# is a semantic version string with the asterisk (*) character
# interpreted as any.
#
# @example
# 1.*.3 > 1.2.2 -> true
# 1.*.3 > 1.5.3 -> false
# 1.*.* > 1.1.1 -> true
# 1.*.* > 2.1.1 -> false
compare_versions() {
    read -a version_installed < <(echo "$1" | cut -d'.' -f1-3 | tr '.' ' ')
    local logical_operator="$2"
    read -a version_required < <(echo "$3" | cut -d'.' -f1-3 | tr '.' ' ')

    # major = 0, minor = 1, patch = 2
    for i in 0 1 2; do
        [[ "${version_required[i]:-*}" == '*' ]] && continue
        (( "${version_installed[i]}" $logical_operator "${version_required[i]}" )) || return 1
    done
}

main "$@"
